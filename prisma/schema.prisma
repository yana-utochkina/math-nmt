generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid()) @db.Uuid
  firstName String?
  nickname  String
  email     String     @unique
  password  String

  UserTask UserTask[]
  Plan     Plan[]
}

model Topic {
  id       String  @id @default(uuid()) @db.Uuid
  parentID String  @default(dbgenerated("'96a2384c-2c11-45b6-af7d-ca04cdffea84'::uuid")) @db.Uuid
  title    String
  Plan     Plan[]
  Task     Task[]
  Theory   Theory?
}

model Theory {
  topicID String @id @db.Uuid
  content String
  topic   Topic  @relation(fields: [topicID], references: [id])
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  topicID     String     @db.Uuid
  description String
  problem     String
  solution    String
  type        AnswerType
  answer      String
  PlanTask    PlanTask[]
  topic       Topic      @relation(fields: [topicID], references: [id])
  UserTask    UserTask[]
}

model UserTask {
  userID    String    @db.Uuid
  taskID    String    @db.Uuid
  passed_on DateTime?
  task      Task      @relation(fields: [taskID], references: [id])
  user      User      @relation(fields: [userID], references: [id])

  @@id([userID, taskID])
}

model Plan {
  id        String     @id @default(uuid()) @db.Uuid
  userID    String     @db.Uuid
  hours     Int?
  startDate DateTime   @default(now())
  endDate   DateTime?
  topicId   String?    @db.Uuid
  Topic     Topic?     @relation(fields: [topicId], references: [id])
  User      User       @relation(fields: [userID], references: [id])
  PlanTask  PlanTask[]
}

model PlanTask {
  planID String @db.Uuid
  taskID String @db.Uuid

  plan Plan @relation(fields: [planID], references: [id])
  task Task @relation(fields: [taskID], references: [id])

  @@id([planID, taskID])
}

enum AnswerType {
  ONE
  MATCH
  TYPE
}
